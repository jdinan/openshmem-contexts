+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+
                 OpenSHMEM Contexts Specification v0.0.6
  
                               James Dinan
                               Intel Corp.
+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+-=-+

Notes to the reader:

This specification is formatted according to the guidelines of the OpenSHMEM
specification.

The specified API is intended to complement the thread safety and nonblocking
communication APIs provided by Cray SHMEM.  Specifically, we assume the
/shmem_init_thread/ routine and thread safety levels SHMEM_THREAD_SINGLE,
SHMEM_THREAD_SERIALIZED, and SHMEM_THREAD_MULTIPLE.  However, we omit the
shmem_thread_* functions and associated API.

For more details, see:

"Thread-Safe SHMEM Extensions," Monika ten Bruggencate, Duncan Roweth, and
Steve Oyanagi.  OpenSHMEM and Related Tech; Experiences, Implementations, and
Tools.  Lecture Notes in Computer Science Volume 8356, 2014, pp 178-185.
Online: http://rd.springer.com/chapter/10.1007%2F978-3-319-05215-1_13

Cray MPT 7.2 Man Pages.  Online: http://goo.gl/nueeE6

------------------------------
XX.XX COMMUNICATION CONTEXTS
------------------------------

Communication contexts can be used to perform sets of independent communcation
operations, where each set can be synchronized in isolation from other sets.
This functionality may be useful for overlapping sets of communication
operations.  It can also be used to isolate communication operations performed
by threads, eliminating interference between threads when multithreaded
processes are used.  Further, when independent parallel communication resources
are available, implementations may utilize contexts to map operations performed
by separate threads to separate resource sets.  This mapping is facilitated
through the use of communication resouce domains, which can be used to
represent the resource set belonging to a thread.

------------------------------
XX.XX.1 Constants and Types
------------------------------

The following new constants are introduced:

    SHMEM_DOMAIN_DEFAULT - The default resource domain.  This resource domain
    utilizes a thread safety model that is identical to the thread safety model
    with which the OpenSHMEM library was initialized.

    SHMEM_CTX_DEFAULT - The default context, created on SHMEM_DOMAIN_DEFAULT.
    All point-to-point communication operations and synchronizations that do
    not specify a context are performed on the default context.

The following new handle types are introduced and are valid for language-level
assignment and comparison:

    shmem_ctx_t - An opaque handle to a SHMEM context.

    shmem_domain_t - An opaque handle to a SHMEM resource domain.

------------------------------
XX.XX.2 Resource Domain Creation
------------------------------

The following function can be used to create resource domains.  Resource
domains correspond to sets of resources that are used for transmitting messages
and are utilized in the creation of communication contexts.  Resource domains
can be used in the creation of communication contexts that will be used by a
given thread.  The resource domain can further be created with a restricted
synchronization model, allowing an OpenSHMEM library to reduce or eliminate
internal synchronizations.

SYNOPSIS

    C/C++:
    void shmem_domain_create(int thread_level, int num_domains,
                              shmem_domain_t domains[]);

    Fortran:
    WIP

DESCRIPTION

Arguments
    IN  thread_level Thread safety model for the domain
    IN  num_domains  Number of domains to create
    OUT domains      Array of /num_domains/ handles to newly created domains

API Description

    Create a new set of communication resource domains with the given thread
    safety model.  The /thread_level/ argument restricts the thread safety
    model that will be used when performing operations on all contexts
    associated with the newly created resource domains.  This argument must be
    the same as or more restrictive than the threading model with which the
    OpenSHMEM library was initialized.  For example, when the OpenSHMEM library
    is initialized in the SHMEM_THREAD_MULTIPLE model, a /thread_level/
    argument of SHMEM_THREAD_SERIALIZED can be provided during domain creation.
    Accesses to all contexts each of the resulting domains must be serialized
    by the user.  In other words, it is erroneous for the user to
    simultaneously perform multiple operations on any context created on a
    given domain.

    Advice to users: Implementations may provide the best resource utilization
    if all domains are created in a single call to /shmem_domain_create/.

Return Values

    None.

Notes

    None.

------------------------------
XX.XX.3 Resource Domain Destruction
------------------------------

The following function can be used to destroy resource domains.

SYNOPSIS

    C/C++:
    void shmem_domain_destroy(int num_domains, shmem_domain_t domains[]);

    Fortran:
    WIP

DESCRIPTION

Arguments
    IN  num_domains  Number of domains to be destroyed
    IN  domains      Pointer to array of /num_domains/ domains to be destroyed

API Description

    Destroy the given set of resource domains.  This function can be called at
    any time; however, internal resource may not be released until all contexts
    using the given resource domain are destroyed.

Return Values

    None.

Notes

    None.

Note to OpenSHMEM committee

    Discuss whether we are comfortable with potentially reference counting an
    internal domain object and freeing it once the last reference is released.
    Otherwise, we would have to require the user not to free the domain as long
    as there are contexts using it.

------------------------------
XX.XX.4 Context Creation
------------------------------

The following function is used to create a communication context.

SYNOPSIS

    C/C++:
    int shmem_ctx_create(shmem_domain_t domain, shmem_ctx_t *ctx);

    Fortran:
    WIP

DESCRIPTION

Arguments
    IN  domain Handle to the domain on which the context will be created
    OUT ctx    Handle to newly created context

API Description

    /shmem_ctx_create/ creates a new communication context on the given
    resource domain and returns its handle through the /ctx/ argument.  If the
    context was created successfully, a SHMEM_SUCCESS value is returned.

Return Values

    Integer - Indicates success or failure of the operation.

Notes

    None.

------------------------------
XX.XX.5 Context Destruction
------------------------------

The following function is used to free a communication context.

SYNOPSIS

    C/C++:
    void shmem_ctx_destroy(shmem_ctx_t ctx);

    Fortran:
    WIP

DESCRIPTION

Arguments
    IN ctx  Handle of the context to be freed

API Description

    /shmem_ctx_destroy/ destroys a context that was created by a call to
    /shmem_ctx_create/.  This function performs an implicit quiet operation on
    the given context before it is freed.

    Rationale: Destroying a context makes it impossible for the user to
    complete communication operations that are pending on that context.  This
    includes nonblocking communication operations, whose local buffers are only
    returned to the user after the operations have been completed.  An implicit
    quiet is performed when freeing a context to avoid this ambiguity.

Return Values

    None.

Notes

    None.

------------------------------
XX.XX.6 Context Fence
------------------------------

Assures ordering of delivery of Put, AMOs, and memory store routines to
symmetric data objects accessed using the given context.

SYNOPSIS

    C/C++:
    void shmem_ctx_fence(shmem_ctx_t ctx);

    Fortran:
    WIP

DESCRIPTION

Arguments
    IN ctx Context on which to perform the fence operation

API Description

    This routine assures ordering of delivery of Put and AMO operations
    performed on /ctx/, and memory store operations to symmetric data objects.
    All Put and AMO operations issued on /ctx/, and memory store operations to
    symmetric data objects issued to a particular remote PE prior to the call
    to /shmem_ctx_fence/ are guaranteed to be delivered before any subsequent
    Put, AMOs, and memory store routines to symmetric data objects to the same
    PE. /shmem_ctx_fence/ guarantees order of delivery, not completion.

    A /ctx/ value of SHMEM_CTX_NULL is invalid and results in undefined
    behavior.

Return Values

    None.

Notes

    Similar to /shmem_fence/, /shmem_ctx_fence/ only provides per-PE ordering
    guarantees and does not guarantee completion of delivery.  See Section
    8.7.1 for additional notes on the /shmem_fence/ routine.

------------------------------
XX.XX.7 Context Quiet
------------------------------

Waits for completion of all outstanding Put, AMOs and memory store routines to
symmetric data objects issued by a PE using the given context.

SYNOPSIS

    C/C++:
    void shmem_ctx_quiet(shmem_ctx_t ctx);

    Fortran:
    WIP

DESCRIPTION

Arguments
    IN ctx Context on which to perform the quiet operation

API Description

    The /shmem_ctx_quiet/ routine ensures completion of Put and AMO operations
    performed on /ctx/, and memory store operations on symmetric data objects
    issued by the calling PE. All Put and AMO operations issued on /ctx/, and
    memory store routines to symmetric data objects are guaranteed to be
    completed and visible to all PEs when /shmem_ctx_quiet/ returns.

    A /ctx/ value of SHMEM_CTX_NULL is invalid and results in undefined
    behavior.

Return Values

    None.

Notes

    See Section 8.7.2 for notes on the /shmem_quiet/ routine.

------------------------------
XX.XX.8 Process Synchronization
------------------------------

Registers the arrival of a PE at a barrier and suspends PE execution until all
other PEs arrive at the barrier.  These operations are similar to
/shmem_barrier/ and /shmem_barrier_all/, with the distinction that they do not
wait for local and remote memory updates to complete.  Waiting for memory
updates to complete can be achieved by calling the /shmem_ctx_quiet/ operation
prior to calling the /shmem_sync/ routine.  The /shmem_barrier/ and
/shmem_barrier_all/ routines are equivalent to performing a /shmem_ctx_quiet/
operation on SHMEM_CTX_DEFAULT followed by the corresponding /shmem_sync/
operation.

SYNOPSIS

    C/C++:
    void shmem_sync(int PE_start, int logPE_stride, int PE_size, long *pSync);
    void shmem_sync_all(void); 


    Fortran:
    WIP

DESCRIPTION

Arguments

API Description

    Same as barrier and barrier_all, with the exception of completing operations.

Return Values

    None.

Notes

    None.

------------------------------
XX.XX.9 Context Communication
------------------------------

The following additional routines are defined for performing communication on a
user-supplied communication context.  The existing versions of these routines
that do not take a context argument are defined as equivalent to the context
versions with the context argument of SHMEM_CTX_DEFAULT.

SYNOPSIS

    C/C++:
    void shmem_ctx_TYPE_p(TYPE *addr, TYPE value, int pe, shmem_ctx_t ctx);
    void shmem_ctx_TYPE_put[_nb](TYPE *dest, const TYPE *source, size_t nelems, int pe, shmem_ctx_t ctx);
    void shmem_ctx_put[32,64,128,mem][_nb](void *dest, const void *source, size_t nelems, int pe, shmem_ctx_t ctx);
    void shmem_ctx_TYPE_iput[_nb](TYPE *dest, const TYPE *source, ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe, shmem_ctx_t ctx);
    void shmem_ctx_iput[32,64,128][_nb](void *dest, const void *source, ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe, shmem_ctx_t ctx);

    TYPE shmem_ctx_TYPE_g(TYPE *addr, int pe, shmem_ctx_t ctx);
    void shmem_ctx_TYPE_get[_nb](TYPE *dest, const TYPE *source, size_t nelems, int pe, shmem_ctx_t ctx);
    void shmem_ctx_get[32,64,128,mem][_nb](void *dest, const void *source, size_t nelems, int pe, shmem_ctx_t ctx);
    void shmem_ctx_TYPE_iget[_nb](TYPE *dest, const TYPE *source, ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe, shmem_ctx_t ctx);
    void shmem_ctx_iget[32,64,128][_nb](void *dest, const void *source, ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe, shmem_ctx_t ctx);

    void shmem_TYPE_add(TYPE *dest, TYPE value, int pe, shmem_ctx_t ctx);
    TYPE shmem_TYPE_cswap(TYPE *dest, TYPE cond, TYPE value, int pe, shmem_ctx_t ctx);
    TYPE shmem_TYPE_swap(TYPE *dest, TYPE value, int pe, shmem_ctx_t ctx);
    TYPE shmem_TYPE_finc(TYPE *dest, int pe, shmem_ctx_t ctx);
    void shmem_TYPE_inc(TYPE *dest, int pe, shmem_ctx_t ctx);
    TYPE shmem_TYPE_fadd(TYPE *dest, TYPE value, int pe, shmem_ctx_t ctx);

    Fortran:
    WIP

DESCRIPTION

    These operations are identical to the corresponding functions that omit the
    context argument, with the difference that non-context routines are always
    performed on the SHMEM_CTX_DEFAULT context, whereas contex routines operate
    on any context, including SHMEM_CTX_DEFAULT.  Further, passing a /ctx/
    argument equal to SHMEM_CTX_NULL is invalid and results in undefined
    behavior.
    
    See non-context versions of these routines for this information.

------------------------------
ADDITIONAL NOTES AND WIP
------------------------------

shmem_barrier and shmem_barrier_all are defined to quiet only the default
context.  This is important because we want to avoid multiple threads using the
same context concurrently and a barrier that touches all contexts could make it
hard for us to eliminate the need for synchronization on per-context state.

Do we want to exclude memory store operations in fence/quiet routines?  If we
had this semantic, we might need to add a separate routine that synchronizes
just memory store operations, which might not be a bad thing since fence/quiet
is a heavy hammer for ordering accesses to interprocess shared memory (e.g.
via shmem_ptr pointers).
